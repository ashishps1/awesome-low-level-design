@startuml

top to bottom direction
skinparam linetype ortho

skinparam backgroundColor transparent
skinparam wrapWidth 550
skinparam roundCorner 15
skinparam defaultFontSize 20
skinparam defaultFontColor black
skinparam ArrowColor black
skinparam Padding 2
skinparam dpi 100
skinparam nodesep 80
skinparam ranksep 100

skinparam class {
  BackgroundColor #00d084
  BorderColor black
  ArrowColor white
  FontSize 25
  BorderThickness 2
  ArrowThickness 3
}

'enum Direction << enumeration >> {
'  + UP
'  + IDLE
'  + DOWN
'}
'class Display {
'  + update(Elevator): void
'}
'class Elevator {
'  - id: int
'  - currentFloor: AtomicInteger
'  - observers: List<ElevatorObserver>
'  - state: ElevatorState
'  - isRunning: boolean
'  - upRequests: TreeSet<Integer>
'  - downRequests: TreeSet<Integer>
'  + addObserver(ElevatorObserver): void
'  + stopElevator(): void
'  + getDirection(): Direction
'  + isRunning(): boolean
'  + setCurrentFloor(int): void
'  + notifyObservers(): void
'  + setState(ElevatorState): void
'  + addRequest(Request): void
'  + move(): void
'  + run(): void
'}
'interface ElevatorObserver << interface >> {
'  + update(Elevator): void
'}
'interface ElevatorSelectionStrategy << interface >> {
'  + selectElevator(List<Elevator>, Request): Optional<Elevator>
'}
'interface ElevatorState << interface >> {
'  + addRequest(Elevator, Request): void
'  + getDirection(): Direction
'  + move(Elevator): void
'}
'class ElevatorSystem {
'  - selectionStrategy: ElevatorSelectionStrategy
'  - instance: ElevatorSystem
'  - executorService: ExecutorService
'  - elevators: Map<Integer, Elevator>
'  + start(): void
'  + shutdown(): void
'  + selectFloor(int, int): void
'  + getInstance(int): ElevatorSystem
'  + requestElevator(int, Direction): void
'}
'class IdleState {
'  + addRequest(Elevator, Request): void
'  + getDirection(): Direction
'  + move(Elevator): void
'}
'class MovingDownState {
'  + addRequest(Elevator, Request): void
'  + getDirection(): Direction
'  + move(Elevator): void
'}
'class MovingUpState {
'  + addRequest(Elevator, Request): void
'  + getDirection(): Direction
'  + move(Elevator): void
'}
'class NearestElevatorStrategy {
'  + selectElevator(List<Elevator>, Request): Optional<Elevator>
'  - isSuitable(Elevator, Request): boolean
'}
'class Request {
'  - direction: Direction
'  - source: RequestSource
'  - targetFloor: int
'}
'enum RequestSource << enumeration >> {
'  + INTERNAL
'  + EXTERNAL
'}
'
'class ElevatorSystemDemo #00bfff {
'    + main(String)
'}
'
'ElevatorObserver          ^-[dashed]- Display
'Elevator                  *-[plain]right-> ElevatorObserver
'Elevator                  *-[plain]--> ElevatorState
'ElevatorSystem            *-[plain]-> Elevator
'ElevatorSystem            *-[plain]-> ElevatorSelectionStrategy
'ElevatorSystem            -[plain]right-> Request
'ElevatorState             ^-[dashed]- IdleState
'ElevatorState             ^-[dashed]- MovingDownState
'ElevatorState             ^-[dashed]- MovingUpState
'ElevatorSelectionStrategy ^-[dashed]- NearestElevatorStrategy
'Request                   *-[plain]-> Direction
'Request                   *-[plain]-> RequestSource
'ElevatorSystemDemo        -[plain]right-> ElevatorSystem
@enduml
